using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Win32;
using System.Data;
using System.Collections.ObjectModel;
using System.Dynamic;

namespace FileManWPF {
   
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window {
        FileBuilder _builder;
        bool _fileALoaded, _fileBLoaded;

        public MainWindow() {
            _builder = new FileBuilder();
            
            InitializeComponent();
           
           // DataGridFileB.DataContext = _builder.FileBPreviewData;
          //  DataGridFileA.DataContext = _builder.FileAPreviewData;

        }

        private void btnSave_Click(object sender, RoutedEventArgs e) {
            
            SaveFileDialog sfd = new SaveFileDialog();
            Nullable<bool> user_saves = sfd.ShowDialog();

            if (user_saves == true) {
                _builder.ParseAndSetIDs(txtBlckIDA.Text, txtBlckIDB.Text);
                _builder.ProcessData(10000, sfd.FileName);
            }
            else if (user_saves != false) {
                MessageBox.Show("There was a problem saving the file.");
            }
        }

        private void btnFileASelect_Click(object sender, RoutedEventArgs e) {
            OpenFileDialog ofd = new OpenFileDialog();
            Nullable<bool> user_opens = ofd.ShowDialog();
            _fileALoaded = true;

            if (user_opens == true) {
                _builder.FileA = new RawFile(ofd.FileName, true);
                
                DataGridFileA.DataContext = _builder.FileAPreviewData;
                txtBlckA.Text = ofd.FileName;
            }
            else if (user_opens != false) {
                MessageBox.Show("There was a problem opening the file");
            }
        }

        private void ListBoxFile_AutoGeneratedColumns(object sender, EventArgs e) {
            var dg = sender as DataGrid;
            dg.Columns.Clear();
            string owner = (dg.Name[dg.Name.Length - 1]).ToString();
            dg.ColumnHeaderStyle = (Style)this.FindResource("CheckBoxHeader");
            var first = dg.ItemsSource.Cast<object>().FirstOrDefault() as DynamicObject;
            if (first == null) return;
            var names = first.GetDynamicMemberNames();
            foreach (var name in names) {
                dg.Columns.Add(new DataGridTextColumn { Header = name + " " +owner, Binding = new Binding(name) });
            }
        }

        private void btnFileBSelect_Click(object sender, RoutedEventArgs e) {
            OpenFileDialog ofd = new OpenFileDialog();
            Nullable<bool> user_opens = ofd.ShowDialog();
            _fileBLoaded = true;

            if (user_opens == true) {
                _builder.FileB = new RawFile(ofd.FileName, true);;
                
                DataGridFileB.DataContext = _builder.FileBPreviewData;
                txtBlckB.Text = ofd.FileName;
            }
            else if (user_opens != false) {
                MessageBox.Show("There was a problem opening the file");
            }
        }

        private void CheckBox_Click(object sender, RoutedEventArgs e) {
            var checkBox = sender as CheckBox;
            string content = checkBox.Content.ToString();
            _builder.ManageExclusionChange(content, (bool)checkBox.IsChecked);

            if (checkForValidIDs()) {
                DataGridResultFile.Columns.Clear();
                
                _builder.ParseAndSetIDs(txtBlckIDA.Text, txtBlckIDB.Text);
                _builder.GenerateResultFilePreview(5);
                DataGridResultFile.DataContext = _builder.ResultFilePreview;
                ListBoxFile_AutoGeneratedColumns(DataGridResultFile, null);
            }

           
        }

        private bool checkForValidIDs() {
            bool allgood = true;

            if (_fileALoaded) {
                allgood =parseID(txtBlckIDA);
                if (!allgood) {
                    MessageBox.Show("File A has no ID input");
                    return allgood;
                }
            }
            if (_fileBLoaded) {
                allgood = parseID(txtBlckIDB);
                if (!allgood) {
                    MessageBox.Show("File A has no ID input");
                    return allgood;
                }
            }
            return allgood;
        }

        private bool parseID(TextBox tB) {
            string[] id = tB.Text.Split(',');
            bool allgood = false;

            foreach (string s in id) {
                allgood = true;
                int tmp = 0;
                if (!Int32.TryParse(s, out tmp)) {
                    MessageBox.Show("There was a problem parsing the unique id data for files: " + s);
                    allgood = false;
                    break;
                }
            }
            return allgood;
        }

        
    }
}
